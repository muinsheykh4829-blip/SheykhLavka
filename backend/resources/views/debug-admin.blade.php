<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .result { margin: 20px 0; padding: 15px; border-radius: 5px; }
        .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        pre { background: #f8f9fa; padding: 10px; border-radius: 5px; overflow: auto; max-height: 400px; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ Sheykh Lavka</h1>
        
        <div class="row">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-header">
                        <h5>üõ†Ô∏è –¢–µ—Å—Ç—ã</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" onclick="testDatabase()">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</button>
                            <button class="btn btn-success" onclick="testCategories()">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</button>
                            <button class="btn btn-info" onclick="testProducts()">–¢–æ–≤–∞—Ä—ã</button>
                            <button class="btn btn-warning" onclick="testOrders()">–ó–∞–∫–∞–∑—ã</button>
                            <button class="btn btn-secondary" onclick="testAll()">–í—Å–µ —Ç–µ—Å—Ç—ã</button>
                        </div>
                        
                        <hr>
                        
                        <h6>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h6>
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary" onclick="openAdmin('categories')">–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</button>
                            <button class="btn btn-outline-success" onclick="openAdmin('products')">–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä—ã</button>
                            <button class="btn btn-outline-warning" onclick="openAdmin('orders')">–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-9">
                <div id="result">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        function showResult(data, success = true, title = '–†–µ–∑—É–ª—å—Ç–∞—Ç') {
            const resultDiv = document.getElementById('result');
            const className = success ? 'success' : 'error';
            const icon = success ? '‚úÖ' : '‚ùå';
            
            resultDiv.innerHTML = `
                <div class="result ${className}">
                    <h4>${icon} ${title}</h4>
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                </div>
            `;
        }
        
        async function testDatabase() {
            try {
                const response = await fetch('/debug-admin/database');
                const data = await response.json();
                showResult(data, data.success, '–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            } catch (error) {
                showResult({error: error.message}, false, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î');
            }
        }
        
        async function testCategories() {
            try {
                const response = await fetch('/debug-admin/categories');
                const data = await response.json();
                showResult(data, data.success, '–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            } catch (error) {
                showResult({error: error.message}, false, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            }
        }
        
        async function testProducts() {
            try {
                const response = await fetch('/debug-admin/products');
                const data = await response.json();
                showResult(data, data.success, '–¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤');
            } catch (error) {
                showResult({error: error.message}, false, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤');
            }
        }
        
        async function testOrders() {
            try {
                const response = await fetch('/debug-admin/orders');
                const data = await response.json();
                showResult(data, data.success, '–¢–µ—Å—Ç –∑–∞–∫–∞–∑–æ–≤');
            } catch (error) {
                showResult({error: error.message}, false, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–∞–∫–∞–∑–æ–≤');
            }
        }
        
        async function testAll() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<div class="alert alert-info">‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...</div>';
            
            const tests = [
                { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', func: testDatabase },
                { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', func: testCategories },
                { name: '–¢–æ–≤–∞—Ä—ã', func: testProducts },
                { name: '–ó–∞–∫–∞–∑—ã', func: testOrders }
            ];
            
            let results = [];
            
            for (const test of tests) {
                try {
                    const response = await fetch('/debug-admin/' + test.name.toLowerCase().replace(' ', '-'));
                    const data = await response.json();
                    results.push({
                        test: test.name,
                        success: data.success,
                        data: data
                    });
                } catch (error) {
                    results.push({
                        test: test.name,
                        success: false,
                        error: error.message
                    });
                }
            }
            
            showResult(results, results.every(r => r.success), '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
        }
        
        function openAdmin(section) {
            // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fetch('/admin/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}'
                },
                body: 'username=admin&password=admin123'
            }).then(() => {
                window.open(`/admin/${section}`, '_blank');
            }).catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                window.open(`/admin/${section}`, '_blank');
            });
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = testDatabase;
    </script>
</body>
</html>
