<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ—Å—Ç API –∑–∞–∫–∞–∑–æ–≤</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 10px 5px; }
        .btn:hover { background: #0056b3; }
        .success { color: green; }
        .error { color: red; }
        pre { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }
        .container { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 5px; }
        input, textarea { width: 100%; padding: 10px; margin: 5px 0; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
    </style>
</head>
<body>
    <h1>üõí –¢–µ—Å—Ç API —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤</h1>
    
    <div class="container">
        <h3>–®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑</h3>
        <button class="btn" onclick="createTestOrder()">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API</button>
        <div id="orderResult"></div>
    </div>

    <div class="container">
        <h3>–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</h3>
        <a href="/admin/orders" target="_blank" class="btn">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫–∞–∑–æ–≤</a>
    </div>

    <div class="container">
        <h3>–®–∞–≥ 3: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Flutter</h3>
        <form onsubmit="return false;">
            <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
            <input type="text" id="address" value="–≥. –¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞ 15, –∫–≤. 25" required>
            
            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <input type="text" id="phone" value="+998901234567" required>
            
            <label>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</label>
            <input type="text" id="name" value="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç">
            
            <label>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</label>
            <select id="payment" style="width: 100%; padding: 10px;">
                <option value="cash">–ù–∞–ª–∏—á–Ω—ã–µ</option>
                <option value="card">–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</option>
                <option value="online">–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞</option>
            </select>
            
            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
            <textarea id="comment" rows="3">–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏</textarea>
            
            <button type="button" class="btn" onclick="createCustomOrder()">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏</button>
        </form>
        <div id="customOrderResult"></div>
    </div>

    <div class="container">
        <h3>üìã –õ–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
        <div id="logs"></div>
    </div>

    <script>
        function log(message, type = 'info') {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue';
            logs.innerHTML += `<div style="color: ${color};">[${timestamp}] ${message}</div>`;
        }

        async function createTestOrder() {
            try {
                log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
                
                const response = await fetch('/api/test-order');
                const result = await response.json();
                
                if (result.success) {
                    log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                    document.getElementById('orderResult').innerHTML = `
                        <div class="success">
                            <strong>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</strong><br>
                            –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${result.order_number}<br>
                            <a href="${result.admin_link}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</a>
                        </div>
                        <pre>${JSON.stringify(result.order, null, 2)}</pre>
                    `;
                } else {
                    log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + result.message, 'error');
                    document.getElementById('orderResult').innerHTML = `
                        <div class="error">
                            <strong>–û—à–∏–±–∫–∞:</strong> ${result.message}
                        </div>
                    `;
                }
            } catch (error) {
                log('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ' + error.message, 'error');
                document.getElementById('orderResult').innerHTML = `
                    <div class="error">
                        <strong>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:</strong> ${error.message}
                    </div>
                `;
            }
        }

        async function createCustomOrder() {
            try {
                const orderData = {
                    delivery_address: document.getElementById('address').value,
                    delivery_phone: document.getElementById('phone').value,
                    delivery_name: document.getElementById('name').value,
                    payment_method: document.getElementById('payment').value,
                    comment: document.getElementById('comment').value
                };

                log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
                log('üì§ –î–∞–Ω–Ω—ã–µ: ' + JSON.stringify(orderData));

                // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
                log('‚ö†Ô∏è –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
                
                document.getElementById('customOrderResult').innerHTML = `
                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px;">
                        <strong>üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Flutter:</strong>
                        <pre>${JSON.stringify(orderData, null, 2)}</pre>
                        <strong>üì° URL:</strong> POST /api/orders<br>
                        <strong>üîê Header:</strong> Authorization: Bearer {token}
                    </div>
                `;
                
            } catch (error) {
                log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        log('üöÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    </script>
</body>
</html>
