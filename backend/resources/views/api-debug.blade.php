<!DOCTYPE html>
<html>
<head>
    <title>–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–∫–∞–∑–æ–≤</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 1000px; margin: 0 auto; padding: 20px; }
        .container { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 5px; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #0056b3; }
        .success { color: green; }
        .error { color: red; }
        pre { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; white-space: pre-wrap; }
        .log { background: #f8f9fa; border-left: 4px solid #007bff; padding: 10px; margin: 5px 0; }
    </style>
</head>
<body>
    <h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∑–∞–∫–∞–∑–æ–≤</h1>
    
    <div class="container">
        <h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤</h3>
        <button class="btn" onclick="checkApiRoutes()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –º–∞—Ä—à—Ä—É—Ç—ã</button>
        <div id="routesResult"></div>
    </div>

    <div class="container">
        <h3>2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h3>
        <button class="btn" onclick="checkDatabase()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã –≤ –ë–î</button>
        <div id="dbResult"></div>
    </div>

    <div class="container">
        <h3>3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</h3>
        <button class="btn" onclick="createTestOrderDetailed()">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ (–¥–µ—Ç–∞–ª—å–Ω–æ)</button>
        <div id="testOrderResult"></div>
    </div>

    <div class="container">
        <h3>4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
        <button class="btn" onclick="checkAuth()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</button>
        <div id="authResult"></div>
    </div>

    <div class="container">
        <h3>üìã –õ–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h3>
        <div id="logs"></div>
    </div>

    <script>
        function log(message, type = 'info') {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue';
            logs.innerHTML += `<div class="log" style="border-left-color: ${color};">[${timestamp}] ${message}</div>`;
        }

        async function checkApiRoutes() {
            log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
            
            const routes = [
                '/api/products',
                '/api/categories', 
                '/api/users/profile'
            ];
            
            let results = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:</h4>';
            
            for (const route of routes) {
                try {
                    const response = await fetch(route);
                    const status = response.status;
                    const statusText = response.statusText;
                    
                    if (status === 200) {
                        results += `<div class="success">‚úÖ ${route} - OK (${status})</div>`;
                        log(`‚úÖ ${route} —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'success');
                    } else if (status === 401) {
                        results += `<div style="color: orange;">üîê ${route} - –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (${status})</div>`;
                        log(`üîê ${route} —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`, 'info');
                    } else {
                        results += `<div class="error">‚ùå ${route} - –û—à–∏–±–∫–∞ ${status} (${statusText})</div>`;
                        log(`‚ùå ${route} –æ—à–∏–±–∫–∞ ${status}`, 'error');
                    }
                } catch (error) {
                    results += `<div class="error">‚ùå ${route} - –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}</div>`;
                    log(`‚ùå ${route} —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞`, 'error');
                }
            }
            
            document.getElementById('routesResult').innerHTML = results;
        }

        async function checkDatabase() {
            log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            try {
                const response = await fetch('/api/debug-db');
                
                if (response.ok) {
                    const result = await response.text();
                    document.getElementById('dbResult').innerHTML = `<pre>${result}</pre>`;
                    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');
                } else {
                    document.getElementById('dbResult').innerHTML = 
                        `<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${response.status}</div>`;
                    log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î', 'error');
                }
            } catch (error) {
                document.getElementById('dbResult').innerHTML = 
                    `<div class="error">–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}</div>`;
                log('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î', 'error');
            }
        }

        async function createTestOrderDetailed() {
            log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
            
            try {
                const response = await fetch('/api/test-order-detailed');
                const result = await response.json();
                
                let html = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:</h4>';
                
                if (result.success) {
                    html += `<div class="success">‚úÖ ${result.message}</div>`;
                    if (result.order) {
                        html += `<pre>${JSON.stringify(result.order, null, 2)}</pre>`;
                    }
                    log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', 'success');
                } else {
                    html += `<div class="error">‚ùå ${result.message}</div>`;
                    if (result.details) {
                        html += `<pre>${JSON.stringify(result.details, null, 2)}</pre>`;
                    }
                    log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error');
                }
                
                document.getElementById('testOrderResult').innerHTML = html;
            } catch (error) {
                document.getElementById('testOrderResult').innerHTML = 
                    `<div class="error">–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}</div>`;
                log('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', 'error');
            }
        }

        async function checkAuth() {
            log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                const registerResponse = await fetch('/api/register', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        first_name: '–¢–µ—Å—Ç',
                        last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        phone: '+998901234999',
                        password: 'password',
                        password_confirmation: 'password'
                    })
                });
                
                let html = '<h4>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</h4>';
                
                if (registerResponse.status === 200 || registerResponse.status === 422) {
                    html += '<div class="success">‚úÖ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
                    const loginResponse = await fetch('/api/login', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            phone: '+998901234999',
                            password: 'password'
                        })
                    });
                    
                    if (loginResponse.ok) {
                        const loginResult = await loginResponse.json();
                        html += '<div class="success">‚úÖ API –≤—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>';
                        if (loginResult.token) {
                            html += '<div class="success">‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–¥–∞–µ—Ç—Å—è</div>';
                        }
                    } else {
                        html += '<div class="error">‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –≤—Ö–æ–¥–∞</div>';
                    }
                } else {
                    html += '<div class="error">‚ùå API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>';
                }
                
                document.getElementById('authResult').innerHTML = html;
                log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
                
            } catch (error) {
                document.getElementById('authResult').innerHTML = 
                    `<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}</div>`;
                log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
            }
        }

        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            log('üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∑–∞–ø—É—â–µ–Ω–∞');
        };
    </script>
</body>
</html>
