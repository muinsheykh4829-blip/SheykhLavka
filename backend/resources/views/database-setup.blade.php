<!DOCTYPE html>
<html>
<head>
    <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</title>
    <meta charset="utf-8">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .container { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 5px; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn-success { background: #28a745; }
        .btn-warning { background: #ffc107; color: #212529; }
        .btn-danger { background: #dc3545; }
        .result { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; white-space: pre-wrap; }
        .success { border-left: 4px solid #28a745; }
        .error { border-left: 4px solid #dc3545; }
        .warning { border-left: 4px solid #ffc107; }
    </style>
</head>
<body>
    <h1>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
    
    <div class="container">
        <h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h3>
        <button class="btn" onclick="checkDatabase()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î</button>
        <div id="dbStatus"></div>
    </div>

    <div class="container">
        <h3>2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π</h3>
        <button class="btn btn-success" onclick="runMigrations()">–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏</button>
        <button class="btn btn-warning" onclick="createTablesManual()">–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é</button>
        <button class="btn btn-danger" onclick="resetDatabase()">–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î</button>
        <div id="migrationResult"></div>
    </div>

    <div class="container">
        <h3>3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>
        <button class="btn btn-success" onclick="createTestData()">–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</button>
        <div id="testDataResult"></div>
    </div>

    <div class="container">
        <h3>4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</h3>
        <button class="btn" onclick="testOrder()">–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑</button>
        <button class="btn" onclick="window.open('/admin/orders', '_blank')">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</button>
        <div id="testResult"></div>
    </div>

    <script>
        async function checkDatabase() {
            try {
                const response = await fetch('/setup/check-database');
                const result = await response.text();
                
                document.getElementById('dbStatus').innerHTML = 
                    `<div class="result">${result}</div>`;
            } catch (error) {
                document.getElementById('dbStatus').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        async function runMigrations() {
            try {
                document.getElementById('migrationResult').innerHTML = 
                    '<div class="result warning">‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...</div>';
                    
                const response = await fetch('/setup/migrate', {method: 'POST'});
                const result = await response.text();
                
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result success">${result}</div>`;
            } catch (error) {
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        async function resetDatabase() {
            if (!confirm('–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) return;
            
            try {
                document.getElementById('migrationResult').innerHTML = 
                    '<div class="result warning">‚è≥ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</div>';
                    
                const response = await fetch('/setup/reset', {method: 'POST'});
                const result = await response.text();
                
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result success">${result}</div>`;
            } catch (error) {
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        async function createTablesManual() {
            try {
                document.getElementById('migrationResult').innerHTML = 
                    '<div class="result warning">‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤—Ä—É—á–Ω—É—é...</div>';
                    
                const response = await fetch('/setup/create-tables', {method: 'POST'});
                const result = await response.text();
                
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result success">${result}</div>`;
                    
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
                setTimeout(checkDatabase, 1000);
            } catch (error) {
                document.getElementById('migrationResult').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        async function createTestData() {
            try {
                document.getElementById('testDataResult').innerHTML = 
                    '<div class="result warning">‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</div>';
                    
                const response = await fetch('/setup/seed', {method: 'POST'});
                const result = await response.text();
                
                document.getElementById('testDataResult').innerHTML = 
                    `<div class="result success">${result}</div>`;
            } catch (error) {
                document.getElementById('testDataResult').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        async function testOrder() {
            try {
                const response = await fetch('/api/test-order-simple', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        delivery_address: '–≥. –¢–∞—à–∫–µ–Ω—Ç, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 123',
                        delivery_phone: '+998901234567',
                        delivery_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç'
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('testResult').innerHTML = 
                        `<div class="result success">‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! ‚Ññ${result.order.order_number}</div>`;
                } else {
                    document.getElementById('testResult').innerHTML = 
                        `<div class="result error">‚ùå ${result.message}</div>`;
                }
            } catch (error) {
                document.getElementById('testResult').innerHTML = 
                    `<div class="result error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            checkDatabase();
        };
    </script>
</body>
</html>
