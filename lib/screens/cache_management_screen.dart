import 'package:flutter/material.dart';
import '../services/api_service.dart';
import '../theme.dart';

class CacheManagementScreen extends StatefulWidget {
  const CacheManagementScreen({super.key});

  @override
  State<CacheManagementScreen> createState() => _CacheManagementScreenState();
}

class _CacheManagementScreenState extends State<CacheManagementScreen> {
  Map<String, dynamic> _cacheStats = {};
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadCacheStats();
  }

  Future<void> _loadCacheStats() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final stats = await ApiService.getCacheStats();
      setState(() {
        _cacheStats = stats;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
    }
  }

  String _formatTimeRemaining(int seconds) {
    if (seconds <= 0) return '–£—Å—Ç–∞—Ä–µ–ª';

    final hours = seconds ~/ 3600;
    final minutes = (seconds % 3600) ~/ 60;
    final remainingSeconds = seconds % 60;

    if (hours > 0) {
      return '$hours—á $minutes–º';
    } else if (minutes > 0) {
      return '$minutes–º $remainingSeconds—Å';
    } else {
      return '$remainingSeconds—Å';
    }
  }

  Widget _buildCacheItem(
      String title, String subtitle, Map<String, dynamic> data) {
    final bool cached = data['cached'] ?? false;
    final bool valid = data['valid'] ?? false;
    final int expiresIn = data['expires_in'] ?? 0;

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor:
              valid ? Colors.green : (cached ? Colors.orange : Colors.grey),
          child: Icon(
            cached ? (valid ? Icons.cached : Icons.schedule) : Icons.storage,
            color: Colors.white,
            size: 20,
          ),
        ),
        title: Text(title),
        subtitle: Text(subtitle),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              cached ? (valid ? '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π' : '–£—Å—Ç–∞—Ä–µ–ª') : '–ù–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω',
              style: TextStyle(
                color: valid
                    ? Colors.green
                    : (cached ? Colors.orange : Colors.grey),
                fontWeight: FontWeight.w500,
              ),
            ),
            if (cached && valid)
              Text(
                '–û—Å—Ç–∞–ª–æ—Å—å: ${_formatTimeRemaining(expiresIn)}',
                style: const TextStyle(
                  fontSize: 12,
                  color: Colors.grey,
                ),
              ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º'),
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadCacheStats,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: const BoxDecoration(
                    color: AppColors.background,
                    border: Border(
                        bottom: BorderSide(color: Colors.grey, width: 0.5)),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'üìã –°—Ç–∞—Ç—É—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),

                // –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–µ—à–∞
                Expanded(
                  child: ListView(
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    children: [
                      if (_cacheStats.containsKey('categories'))
                        _buildCacheItem(
                          '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
                          '–ö–µ—à 72 —á–∞—Å–∞ - –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–¥–∫–æ',
                          _cacheStats['categories'],
                        ),
                      if (_cacheStats.containsKey('products'))
                        _buildCacheItem(
                          '–¢–æ–≤–∞—Ä—ã',
                          '–ö–µ—à 12 —á–∞—Å–æ–≤ - —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è',
                          _cacheStats['products'],
                        ),
                      if (_cacheStats.containsKey('banners'))
                        _buildCacheItem(
                          '–ë–∞–Ω–Ω–µ—Ä—ã',
                          '–ö–µ—à 4 –¥–Ω—è - –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ –º–µ–Ω—è—é—Ç—Å—è',
                          _cacheStats['banners'],
                        ),
                      if (_cacheStats.containsKey('profile'))
                        _buildCacheItem(
                          '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                          '–ö–µ—à 30 –º–∏–Ω—É—Ç',
                          _cacheStats['profile'],
                        ),

                      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∫–µ—à–∏—Ä—É—é—Ç—Å—è
                      const SizedBox(height: 20),
                      const Padding(
                        padding: EdgeInsets.symmetric(horizontal: 16),
                        child: Text(
                          '–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.grey,
                          ),
                        ),
                      ),
                      const SizedBox(height: 8),

                      _buildInfoItem(
                        'üõí –ö–æ—Ä–∑–∏–Ω–∞',
                        '–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å —Å–µ—Ä–≤–µ—Ä–∞',
                        Colors.blue,
                      ),
                      _buildInfoItem(
                        'üì¶ –ó–∞–∫–∞–∑—ã',
                        '–í—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å —Å–µ—Ä–≤–µ—Ä–∞',
                        Colors.blue,
                      ),
                      _buildInfoItem(
                        'üì± SMS –∫–æ–¥—ã',
                        '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å',
                        Colors.red,
                      ),
                      _buildInfoItem(
                        'üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
                        '–ö–µ—à 5 –º–∏–Ω—É—Ç',
                        Colors.green,
                      ),
                    ],
                  ),
                ),

                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: const BoxDecoration(
                    color: Colors.white,
                    border:
                        Border(top: BorderSide(color: Colors.grey, width: 0.5)),
                  ),
                  child: Column(
                    children: [
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: () async {
                            final confirm = await showDialog<bool>(
                              context: context,
                              builder: (context) => AlertDialog(
                                title: const Text('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ç–æ–≤–∞—Ä–æ–≤?'),
                                content: const Text(
                                  '–¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ.',
                                ),
                                actions: [
                                  TextButton(
                                    onPressed: () =>
                                        Navigator.pop(context, false),
                                    child: const Text('–û—Ç–º–µ–Ω–∞'),
                                  ),
                                  ElevatedButton(
                                    onPressed: () =>
                                        Navigator.pop(context, true),
                                    child: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                                  ),
                                ],
                              ),
                            );

                            if (confirm == true) {
                              await ApiService.clearProductsCache();
                              await _loadCacheStats();
                              if (mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                      content: Text('–ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤ –æ—á–∏—â–µ–Ω')),
                                );
                              }
                            }
                          },
                          icon: const Icon(Icons.inventory),
                          label: const Text('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ç–æ–≤–∞—Ä–æ–≤'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                      const SizedBox(height: 8),
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: () async {
                            final confirm = await showDialog<bool>(
                              context: context,
                              builder: (context) => AlertDialog(
                                title: const Text('–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à?'),
                                content: const Text(
                                  '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
                                ),
                                actions: [
                                  TextButton(
                                    onPressed: () =>
                                        Navigator.pop(context, false),
                                    child: const Text('–û—Ç–º–µ–Ω–∞'),
                                  ),
                                  ElevatedButton(
                                    onPressed: () =>
                                        Navigator.pop(context, true),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.red,
                                    ),
                                    child: const Text('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ'),
                                  ),
                                ],
                              ),
                            );

                            if (confirm == true) {
                              await ApiService.clearAllCache();
                              await _loadCacheStats();
                              if (mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                      content: Text('–í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω')),
                                );
                              }
                            }
                          },
                          icon: const Icon(Icons.delete_sweep),
                          label: const Text('–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.red,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildInfoItem(String title, String subtitle, Color color) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 2),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: color,
          child: const Icon(
            Icons.info_outline,
            color: Colors.white,
            size: 20,
          ),
        ),
        title: Text(title),
        subtitle: Text(subtitle),
        dense: true,
      ),
    );
  }
}
