import 'dart:io' show Platform;

class ApiConfig {
  // –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ Laravel API
  // –î–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ Android –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 10.0.2.2
  // –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP –∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  static const String androidEmulatorUrl = 'http://10.0.2.2:8000/api/v1';
  static const String desktopUrl = 'http://127.0.0.1:8000/api/v1';
  static const String alternativeUrl =
      'http://192.168.100.87:8000/api/v1'; // –ê–≤—Ç–æ-–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

  // URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω)
  static const String productionUrl = 'https://yourdomain.com/api/v1';

  // –¢–µ–∫—É—â–∏–π URL (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
  static String get currentUrl {
    const bool isProduction = bool.fromEnvironment('dart.vm.product');

    if (isProduction) {
      // –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω URL –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –¥–ª—è —Ç–µ—Å—Ç–∞
      if (productionUrl.contains('yourdomain.com')) {
        return alternativeUrl.isNotEmpty ? alternativeUrl : androidEmulatorUrl;
      }
      return productionUrl;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    String url;
    try {
      if (Platform.isAndroid) {
        // –ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ alternativeUrl –Ω–∞ –≤–∞—à IP.
        url = alternativeUrl.isNotEmpty ? alternativeUrl : androidEmulatorUrl;
      } else {
        url = desktopUrl; // –î–ª—è Windows, macOS, Linux, Web
      }
    } catch (e) {
      // –ï—Å–ª–∏ Platform –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, Web) ‚Äì fallback
      url = desktopUrl;
    }

    print(
        'üîß API URL: $url (Production: $isProduction, Platform: ${_getPlatformName()})');
    return url;
  }

  // –ë–∞–∑–æ–≤—ã–π origin –±–µ–∑ /api/v1 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (uploads, storage, etc.)
  static String get baseOrigin {
    final uri = Uri.parse(currentUrl);
    final origin =
        '${uri.scheme}://${uri.host}${uri.hasPort ? ':${uri.port}' : ''}';
    return origin;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
  static String fileUrl(String relativePath) {
    if (relativePath.startsWith('http://') ||
        relativePath.startsWith('https://')) {
      return relativePath; // –£–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
    }
    final cleaned =
        relativePath.startsWith('/') ? relativePath.substring(1) : relativePath;
    return '$baseOrigin/$cleaned';
  }

  static String _getPlatformName() {
    try {
      if (Platform.isAndroid) return 'Android';
      if (Platform.isIOS) return 'iOS';
      if (Platform.isWindows) return 'Windows';
      if (Platform.isMacOS) return 'macOS';
      if (Platform.isLinux) return 'Linux';
      return 'Unknown';
    } catch (e) {
      return 'Web';
    }
  }

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
  static const String loginEndpoint = '/auth/login';
  static const String registerEndpoint = '/auth/register';
  static const String ordersEndpoint = '/orders';
  static const String categoriesEndpoint = '/categories';
  static const String productsEndpoint = '/products';
  static const String cartEndpoint = '/cart';

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static Map<String, String> get defaultHeaders => {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      };

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  static Map<String, String> authHeaders(String token) => {
        ...defaultHeaders,
        'Authorization': 'Bearer $token',
      };

  // –¢–∞–π–º–∞—É—Ç—ã
  static const Duration connectTimeout = Duration(seconds: 30);
  static const Duration receiveTimeout = Duration(seconds: 30);
}
