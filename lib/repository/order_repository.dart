import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/order.dart';
import '../services/api_service.dart';

class OrderRepository {
  static const String _ordersKey = 'cached_orders';

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  static Future<List<Order>> loadOrders() async {
    try {
      print('üîß –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–æ–≤...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      final isAuth = await ApiService.isAuthenticated();
      if (!isAuth) {
        print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ API
      print('üîß API URL: ${ApiService.baseUrl}');
      final response = await ApiService.getOrders();
      print('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: $response');

      if (response['success'] == true && response['orders'] != null) {
        final ordersData = response['orders'] as List<dynamic>;
        print('üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –≤ API: ${ordersData.length}');

        final orders = <Order>[];
        for (var orderData in ordersData) {
          try {
            final order = Order.fromJson(orderData);
            orders.add(order);
            print('‚úÖ –ó–∞–∫–∞–∑ ${order.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
          } catch (e) {
            print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
            print('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: $orderData');
          }
        }

        return orders;
      } else {
        print(
            '‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}');
        return [];
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ API: $e');
      rethrow;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static Future<List<Order>> loadLocalOrders() async {
    final prefs = await SharedPreferences.getInstance();
    final list = prefs.getStringList(_ordersKey) ?? [];

    final orders = <Order>[];
    for (var jsonString in list) {
      try {
        final orderData = json.decode(jsonString);
        final order = Order.fromJson(orderData);
        orders.add(order);
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      }
    }

    return orders;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  static Future<void> _saveLocalOrders(List<Order> orders) async {
    final prefs = await SharedPreferences.getInstance();

    final jsonList = <String>[];
    for (var order in orders) {
      try {
        final orderMap = {
          'id': order.id,
          'order_number': order.orderNumber,
          'user_id': order.userId,
          'status': order.status,
          'subtotal': order.subtotal,
          'delivery_fee': order.deliveryFee,
          'discount': order.discount,
          'total': order.total,
          'payment_method': order.paymentMethod,
          'payment_status': order.paymentStatus,
          'delivery_address': order.deliveryAddress,
          'delivery_phone': order.deliveryPhone,
          'delivery_name': order.deliveryName,
          'delivery_time': order.deliveryTime,
          'delivery_type': order.deliveryType,
          'comment': order.comment,
          'created_at': order.createdAt.toIso8601String(),
          'items': order.items
              .map((item) => {
                    'id': item.id,
                    'product_id': item.productId,
                    'quantity': item.quantity,
                    'price': item.price,
                    'total': item.total,
                    'product': item.product,
                  })
              .toList(),
        };
        jsonList.add(json.encode(orderMap));
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.id}: $e');
      }
    }

    await prefs.setStringList(_ordersKey, jsonList);
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å API
  static Future<void> syncLocalOrders() async {
    try {
      final apiOrders = await loadOrders();
      await _saveLocalOrders(apiOrders);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: $e');
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  static Future<void> addLocalOrder(Order order) async {
    final prefs = await SharedPreferences.getInstance();
    final list = prefs.getStringList(_ordersKey) ?? [];

    final orderMap = {
      'id': order.id,
      'order_number': order.orderNumber,
      'user_id': order.userId,
      'status': order.status,
      'subtotal': order.subtotal,
      'delivery_fee': order.deliveryFee,
      'discount': order.discount,
      'total': order.total,
      'payment_method': order.paymentMethod,
      'payment_status': order.paymentStatus,
      'delivery_address': order.deliveryAddress,
      'delivery_phone': order.deliveryPhone,
      'delivery_name': order.deliveryName,
      'delivery_time': order.deliveryTime,
      'delivery_type': order.deliveryType,
      'comment': order.comment,
      'created_at': order.createdAt.toIso8601String(),
      'items': order.items
          .map((item) => {
                'id': item.id,
                'product_id': item.productId,
                'quantity': item.quantity,
                'price': item.price,
                'total': item.total,
                'product': item.product,
              })
          .toList(),
    };

    list.insert(0, json.encode(orderMap));
    await prefs.setStringList(_ordersKey, list);
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
  static Future<void> clearLocalOrders() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_ordersKey);
  }

  /// –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static Future<void> removeLocalOrder(int orderId) async {
    final prefs = await SharedPreferences.getInstance();
    final list = prefs.getStringList(_ordersKey) ?? [];

    final filtered = list.where((jsonString) {
      try {
        final orderData = json.decode(jsonString);
        return orderData['id'] != orderId;
      } catch (e) {
        return false;
      }
    }).toList();

    await prefs.setStringList(_ordersKey, filtered);
  }
}
