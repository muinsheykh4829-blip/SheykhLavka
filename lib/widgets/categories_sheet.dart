import 'package:flutter/material.dart';
import 'modern_loader.dart';
import '../screens/category_product_screen.dart';
import '../services/api_service.dart';
import '../models/category.dart';
import '../config/api_config.dart';

class CategoriesSheet extends StatefulWidget {
  final ScrollController controller;
  const CategoriesSheet({super.key, required this.controller});

  @override
  State<CategoriesSheet> createState() => _CategoriesSheetState();
}

class _CategoriesSheetState extends State<CategoriesSheet> {
  List<Category> _categories = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadCategories();
  }

  Future<void> _loadCategories() async {
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    try {
      final response = await ApiService.getCategories();
      print('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: $response');

      if (response['success'] == true && response['data'] != null) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
        final data = response['data'];
        final categories = (data is List ? data : <dynamic>[])
            .map((json) => Category.fromJson(json))
            .toList();

        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}');
        setState(() {
          _categories = categories; // –î–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
          _isLoading = false;
        });

        if (categories.isEmpty) {
          print('‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã - –¥–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
        }
      } else {
        print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        setState(() {
          _categories = []; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
          _isLoading = false;
        });
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      setState(() {
        _categories = []; // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    double dragStartY = 0;
    double dragDelta = 0;

    if (_isLoading) {
      return Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(28)),
        ),
        child: const Center(child: ModernLoader(label: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')),
      );
    }

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (_categories.isEmpty) {
      return Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(28)),
          boxShadow: [
            BoxShadow(
              blurRadius: 20,
              color: Colors.black12,
              offset: Offset(0, -6),
            )
          ],
        ),
        child: const Center(
          child: Padding(
            padding: EdgeInsets.all(32.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.category_outlined,
                  size: 64,
                  color: Colors.grey,
                ),
                SizedBox(height: 16),
                Text(
                  '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.grey,
                  ),
                ),
                SizedBox(height: 8),
                Text(
                  '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      );
    }

    return GestureDetector(
      onVerticalDragStart: (details) {
        dragStartY = details.globalPosition.dy;
        dragDelta = 0;
      },
      onVerticalDragUpdate: (details) {
        dragDelta = details.globalPosition.dy - dragStartY;
      },
      onVerticalDragEnd: (details) {
        if (dragDelta > 60) {
          Navigator.of(context).maybePop();
        }
      },
      behavior: HitTestBehavior.opaque,
      child: Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(28)),
          boxShadow: [
            BoxShadow(
              blurRadius: 20,
              color: Colors.black12,
              offset: Offset(0, -6),
            )
          ],
        ),
        child: GridView.builder(
          controller: widget.controller,
          padding: const EdgeInsets.fromLTRB(16, 16, 16, 24),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 3,
            mainAxisSpacing: 12,
            crossAxisSpacing: 12,
            childAspectRatio: 0.75,
          ),
          itemCount: _categories.length,
          itemBuilder: (context, i) {
            final category = _categories[i];
            return InkWell(
              borderRadius: BorderRadius.circular(16),
              onTap: () {
                print('Category tapped: ${category.nameRu}');

                Navigator.of(context)
                    .push(
                  MaterialPageRoute(
                    builder: (_) => CategoryProductScreen(category: category),
                  ),
                )
                    .then((result) {
                  print('Navigation completed');
                }).catchError((error) {
                  print('Navigation error: $error');
                });
              },
              child: ClipRRect(
                borderRadius: BorderRadius.circular(16),
                child: Stack(
                  children: [
                    // –§–æ–Ω (–∏–∫–æ–Ω–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏)
                    Positioned.fill(
                      child: Container(
                        color: const Color(0xFFF7F7F9),
                        child: _buildCategoryImage(category),
                      ),
                    ),
                    // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Å–≤–µ—Ä—Ö—É –ø–æ–¥ —Ç–µ–∫—Å—Ç
                    Positioned(
                      left: 0,
                      right: 0,
                      top: 0,
                      child: Container(
                        padding: const EdgeInsets.fromLTRB(8, 8, 8, 6),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Colors.black.withValues(alpha: 0.45),
                              Colors.black.withValues(alpha: 0.0),
                            ],
                          ),
                        ),
                        child: Text(
                          category.nameRu.isNotEmpty
                              ? category.nameRu
                              : category.name,
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontWeight: FontWeight.w700,
                            fontSize: 13,
                            color: Colors.black,
                            height: 1.15,
                            shadows: [
                              Shadow(
                                offset: Offset(0, 1),
                                blurRadius: 2,
                                color: Colors.white,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

Widget _buildCategoryImage(Category category) {
  final iconPath = category.icon;
  if (iconPath == null || iconPath.isEmpty) {
    return Center(
      child: FractionallySizedBox(
        widthFactor: 0.8, // —Å–ª–µ–≥–∫–∞ —É–∂–µ
        child: Image.asset(
          'assets/categories/vegetables.png',
          fit: BoxFit.contain,
        ),
      ),
    );
  }
  // –ï—Å–ª–∏ —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ uploads/storage
  final isAbsolute =
      iconPath.startsWith('http://') || iconPath.startsWith('https://');
  final isRelativeUpload =
      iconPath.startsWith('uploads/') || iconPath.startsWith('/uploads/');
  final isRelativeStorage =
      iconPath.startsWith('storage/') || iconPath.startsWith('/storage/');

  if (isAbsolute || isRelativeUpload || isRelativeStorage) {
    String url = iconPath;
    if (!isAbsolute) {
      // –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –¥–≤–æ–π–Ω–æ–π
      final cleaned =
          iconPath.startsWith('/') ? iconPath.substring(1) : iconPath;
      url = ApiConfig.fileUrl(cleaned); // –∏—Å–ø–æ–ª—å–∑—É–µ–º origin –±–µ–∑ /api/v1
    }
    return Center(
      child: FractionallySizedBox(
        widthFactor: 0.8, // —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
        child: Image.network(
          url,
          fit: BoxFit.contain,
          errorBuilder: (c, e, s) => const Center(
            child: Icon(Icons.broken_image, color: Colors.grey, size: 42),
          ),
        ),
      ),
    );
  } else {
    return Center(
      child: FractionallySizedBox(
        widthFactor: 0.8,
        child: Image.asset(
          iconPath,
          fit: BoxFit.contain,
          errorBuilder: (c, e, s) => const Center(
            child:
                Icon(Icons.image_not_supported, color: Colors.grey, size: 42),
          ),
        ),
      ),
    );
  }
}
