import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../config/api_config.dart';
import 'cache_service.dart';

class ApiService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ ApiConfig
  static String get baseUrl => ApiConfig.currentUrl;

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<Map<String, String>> _getHeaders(
      {bool needsAuth = false}) async {
    Map<String, String> headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    if (needsAuth) {
      final token = await getToken();
      if (token != null) {
        headers['Authorization'] = 'Bearer $token';
      }
    }

    return headers;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
  static Future<void> saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
  static Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  // –ê–ª–∏–∞—Å –¥–ª—è getToken
  static Future<String?> getStoredToken() async {
    return getToken();
  }

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
  static Future<void> removeToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token');
  }

  // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ "---"
  static String _cleanResponse(String responseBody) {
    if (responseBody.startsWith('---')) {
      return responseBody.substring(3); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ "---"
    }
    return responseBody;
  }

  // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
  static dynamic _safeJsonDecode(String responseBody) {
    final cleanBody = _cleanResponse(responseBody);
    if (cleanBody.trim().isEmpty) {
      return {
        'success': false,
        'message': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞',
      };
    }
    try {
      return json.decode(cleanBody);
    } catch (e) {
      print('‚ö† JSON parse error: $e; body="$cleanBody"');
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞',
        'raw': cleanBody.substring(
            0, cleanBody.length > 300 ? 300 : cleanBody.length)
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  static Future<bool> isAuthenticated() async {
    final token = await getToken();
    return token != null && token.isNotEmpty;
  }

  // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> register({
    required String name,
    required String phone,
    required String password,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/register'),
        headers: await _getHeaders(),
        body: json.encode({
          'name': name,
          'phone': phone,
          'password': password,
          'password_confirmation': password,
        }),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞
  static Future<Map<String, dynamic>> verifyCode({
    required int userId,
    required String code,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/verify-code'),
        headers: await _getHeaders(),
        body: json.encode({
          'user_id': userId,
          'code': code,
        }),
      );

      final data = _safeJsonDecode(response.body);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
      if (data['success'] == true && data['data']['token'] != null) {
        await saveToken(data['data']['token']);
      }

      return data;
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  static Future<Map<String, dynamic>> sendLoginSms({
    required String phone,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/send-login-sms'),
        headers: await _getHeaders(),
        body: json.encode({
          'phone': phone,
        }),
      );
      print(
          '‚û° sendLoginSms -> ${response.statusCode} ${response.body.length}b');
      if (response.statusCode != 200) {
        print('‚ö† Non-200 body: ${response.body}');
      }
      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  static Future<Map<String, dynamic>> login({
    required String phone,
    required String password,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/login'),
        headers: await _getHeaders(),
        body: json.encode({
          'phone': phone,
          'password': password,
        }),
      );
      print('‚û° login -> ${response.statusCode} ${response.body.length}b');
      if (response.statusCode != 200) {
        print('‚ö† Non-200 body: ${response.body}');
      }
      final data = _safeJsonDecode(response.body);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
      if (data['success'] == true && data['data']['token'] != null) {
        await saveToken(data['data']['token']);
      }

      return data;
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  static Future<Map<String, dynamic>> logout() async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/auth/logout'),
        headers: await _getHeaders(needsAuth: true),
      );

      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –æ—á–∏—â–∞–µ–º –∫–µ—à –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      await removeToken();
      await CacheService.clearCache();

      return _safeJsonDecode(response.body);
    } catch (e) {
      await removeToken();
      await CacheService.clearCache();
      return {
        'success': true,
        'message': '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> updateProfile({
    required String firstName,
    required String lastName,
    required String gender,
    String? avatarPath,
  }) async {
    try {
      final body = {
        'first_name': firstName,
        'last_name': lastName,
        'gender': gender,
      };

      final response = await http.put(
        Uri.parse('$baseUrl/user/profile'),
        headers: await _getHeaders(needsAuth: true),
        body: json.encode(body),
      );

      final result = _safeJsonDecode(response.body);

      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (result['success'] == true) {
        await CacheService.clearProfileCache();
      }

      return result;
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> getProfile() async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    final cachedData = await CacheService.getCachedProfile();
    if (cachedData != null) {
      return cachedData;
    }

    try {
      final response = await http.get(
        Uri.parse('$baseUrl/user/profile'),
        headers: await _getHeaders(needsAuth: true),
      );

      if (response.statusCode == 200) {
        final data = _safeJsonDecode(response.body);
        if (data['success'] == true) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          await CacheService.setCachedProfile(data);
          return data;
        }
      }

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e',
      };
    }
  }

  // –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static Future<Map<String, dynamic>> getCategories() async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    final cachedData = await CacheService.getCachedCategories();
    if (cachedData != null) {
      return cachedData;
    }

    // –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    try {
      final url = '$baseUrl/categories';
      print('üåê –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $url');

      final response = await http
          .get(
            Uri.parse(url),
            headers: await _getHeaders(),
          )
          .timeout(const Duration(seconds: 30));

      print('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = _safeJsonDecode(response.body);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data['data'] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        if (data['success'] == true && data['data'] != null) {
          print('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${(data['data'] as List).length}');
          final result = {
            'success': true,
            'data': data['data'] is List ? data['data'] : []
          };

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          await CacheService.setCachedCategories(result);

          return result;
        } else {
          print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: $data');
        }
      } else {
        print('‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode} - ${response.body}');
      }

      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}',
        'data': []
      };
    } catch (e) {
      print('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e',
        'data': [] // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
  static Future<Map<String, dynamic>> getProducts({
    int? categoryId,
    String? search,
    int page = 1,
  }) async {
    // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
    if (page == 1) {
      final cachedData = await CacheService.getCachedProducts(
        categoryId: categoryId?.toString(),
        search: search,
      );
      if (cachedData != null) {
        return cachedData;
      }
    }

    try {
      final params = <String, String>{
        'page': page.toString(),
      };

      if (categoryId != null) params['category_id'] = categoryId.toString();
      if (search != null && search.isNotEmpty) params['search'] = search;

      final uri =
          Uri.parse('$baseUrl/products').replace(queryParameters: params);

      final response = await http.get(
        uri,
        headers: await _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = _safeJsonDecode(response.body);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data['data'] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        if (data['success'] == true && data['data'] != null) {
          final result = {
            'success': true,
            'data': data['data'] is List ? data['data'] : []
          };

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (page == 1) {
            await CacheService.setCachedProducts(
              result,
              categoryId: categoryId?.toString(),
              search: search,
            );
          }

          return result;
        }
      }

      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}',
        'data': []
      };
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: $e',
        'data': []
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
  static Future<Map<String, dynamic>> getProduct(int productId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/products/$productId'),
        headers: await _getHeaders(),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä—ã
  static Future<Map<String, dynamic>> getBanners() async {
    print('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤...');
    print('üìç URL: $baseUrl/banners');

    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–µ—à
    // final cachedData = await CacheService.getCachedBanners();
    // if (cachedData != null) {
    //   print('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
    //   return cachedData;
    // }

    try {
      final response = await http.get(
        Uri.parse('$baseUrl/banners'),
        headers: await _getHeaders(),
      );

      print('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final data = _safeJsonDecode(response.body);
        if (data['success'] == true) {
          print(
              '‚úÖ –ë–∞–Ω–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${data['data']?.length ?? 0} —à—Ç.');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          await CacheService.setCachedBanners(data);
          return data;
        }
      }

      return _safeJsonDecode(response.body);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: $e');
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: $e',
        'data': []
      };
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –±–∞–Ω–Ω–µ—Ä—É
  static Future<Map<String, dynamic>> registerBannerClick(int bannerId) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/banners/$bannerId/click'),
        headers: await _getHeaders(),
      );

      final data = _safeJsonDecode(response.body);
      return data;
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞: $e',
      };
    }
  }

  // –ö–û–†–ó–ò–ù–ê (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  static Future<Map<String, dynamic>> getCart() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/cart'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: $e',
      };
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  static Future<Map<String, dynamic>> addToCart({
    required int productId,
    required int quantity,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/cart'),
        headers: await _getHeaders(needsAuth: true),
        body: json.encode({
          'product_id': productId,
          'quantity': quantity,
        }),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: $e',
      };
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  static Future<Map<String, dynamic>> updateCartItem({
    required int cartItemId,
    required int quantity,
  }) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/cart/$cartItemId'),
        headers: await _getHeaders(needsAuth: true),
        body: json.encode({
          'quantity': quantity,
        }),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: $e',
      };
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  static Future<Map<String, dynamic>> removeFromCart(int cartItemId) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/cart/$cartItemId'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: $e',
      };
    }
  }

  // ================== –ê–î–†–ï–°–ê ==================

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> getAddresses() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/addresses'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: $e',
      };
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
  static Future<Map<String, dynamic>> addAddress({
    required String street,
    required String houseNumber,
    String? apartment,
    String? entrance,
    String? floor,
    String? intercom,
    String? city,
    String? district,
    String? comment,
    String? type,
    String? title,
    bool isDefault = false,
  }) async {
    try {
      final data = {
        'street': street,
        'house_number': houseNumber,
        'apartment': apartment,
        'entrance': entrance,
        'floor': floor,
        'intercom': intercom,
        'city': city ?? '–¢–∞—à–∫–µ–Ω—Ç',
        'district': district,
        'comment': comment,
        'type': type ?? 'home',
        'title': title,
        'is_default': isDefault,
      };

      // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
      data.removeWhere((key, value) => value == null);

      final response = await http.post(
        Uri.parse('$baseUrl/addresses'),
        headers: await _getHeaders(needsAuth: true),
        body: json.encode(data),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e',
      };
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å
  static Future<Map<String, dynamic>> updateAddress({
    required int id,
    String? street,
    String? houseNumber,
    String? apartment,
    String? entrance,
    String? floor,
    String? intercom,
    String? city,
    String? district,
    String? comment,
    String? type,
    String? title,
    bool? isDefault,
  }) async {
    try {
      final data = <String, dynamic>{};

      if (street != null) data['street'] = street;
      if (houseNumber != null) data['house_number'] = houseNumber;
      if (apartment != null) data['apartment'] = apartment;
      if (entrance != null) data['entrance'] = entrance;
      if (floor != null) data['floor'] = floor;
      if (intercom != null) data['intercom'] = intercom;
      if (city != null) data['city'] = city;
      if (district != null) data['district'] = district;
      if (comment != null) data['comment'] = comment;
      if (type != null) data['type'] = type;
      if (title != null) data['title'] = title;
      if (isDefault != null) data['is_default'] = isDefault;

      final response = await http.put(
        Uri.parse('$baseUrl/addresses/$id'),
        headers: await _getHeaders(needsAuth: true),
        body: json.encode(data),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e',
      };
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å
  static Future<Map<String, dynamic>> deleteAddress(int id) async {
    try {
      final response = await http.delete(
        Uri.parse('$baseUrl/addresses/$id'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e',
      };
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static Future<Map<String, dynamic>> setDefaultAddress(int id) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/addresses/$id/default'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $e',
      };
    }
  }

  // ===== –ó–ê–ö–ê–ó–´ =====

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> getOrders() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/orders'),
        headers: await _getHeaders(needsAuth: true),
      );

      if (response.statusCode == 200) {
        final data = _safeJsonDecode(response.body);
        return {
          'success': data['success'] ?? false,
          'orders': data['orders'] ?? []
        };
      }

      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}',
        'orders': []
      };
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: $e',
        'orders': []
      };
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  static Future<Map<String, dynamic>> createOrder({
    required String deliveryAddress,
    required String deliveryPhone,
    String? deliveryName,
    String? deliveryTime,
    String? paymentMethod,
    String? comment,
    String? deliveryType, // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    List<Map<String, dynamic>>? items, // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
  }) async {
    try {
      print('üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');

      final requestData = {
        'delivery_address': deliveryAddress,
        'delivery_phone': deliveryPhone,
        'delivery_name': deliveryName,
        'delivery_time': deliveryTime,
        'payment_method': paymentMethod ?? 'cash',
        'comment': comment,
        'delivery_type': deliveryType ?? 'standard', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        if (items != null) 'items': items, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      };

      print('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: $requestData');
      print('üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryType ?? 'standard'}');

      final response = await http
          .post(
            Uri.parse('$baseUrl/orders'),
            headers: await _getHeaders(needsAuth: true),
            body: json.encode(requestData),
          )
          .timeout(const Duration(seconds: 30));

      print('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = _safeJsonDecode(response.body);

        if (data['success'] == true) {
          print('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${data['order']?['order_number']}');
          return {
            'success': true,
            'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
            'order': data['order']
          };
        } else {
          print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${data['message']}');
        }
      }

      return _safeJsonDecode(response.body);
    } catch (e) {
      print('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: $e');
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
  static Future<Map<String, dynamic>> getOrderDetails(int orderId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/orders/$orderId'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: $e',
      };
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  static Future<Map<String, dynamic>> cancelOrder(int orderId) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/orders/$orderId/cancel'),
        headers: await _getHeaders(needsAuth: true),
      );

      return _safeJsonDecode(response.body);
    } catch (e) {
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: $e',
      };
    }
  }

  // –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ï–®–ï–ú

  // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
  static Future<void> clearAllCache() async {
    await CacheService.clearCache();
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞)
  static Future<void> clearProductsCache() async {
    await CacheService.clearProductsCache();
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
  static Future<void> clearProfileCache() async {
    await CacheService.clearProfileCache();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
  static Future<Map<String, dynamic>> getCacheStats() async {
    return await CacheService.getCacheStats();
  }
}
