import 'dart:convert';
import 'dart:developer' as developer;
import 'package:shared_preferences/shared_preferences.dart';

class CacheService {
  static const String _debugEmoji = 'üìã';

  // –ö–ª—é—á–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  static const String _categoriesKey = 'cached_categories';
  static const String _productsKey = 'cached_products';
  static const String _bannersKey = 'cached_banners';
  static const String _profileKey = 'cached_profile';

  // –ö–ª—é—á–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  static const String _categoriesTimeKey = 'categories_cache_time';
  static const String _productsTimeKey = 'products_cache_time';
  static const String _bannersTimeKey = 'banners_cache_time';
  static const String _profileTimeKey = 'profile_cache_time';

  // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - 2 —Å–µ–∫—É–Ω–¥—ã)
  static const int categoriesCacheDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 24 —á–∞—Å–∞)
  static const int productsCacheDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 1 —á–∞—Å)
  static const int bannersCacheDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 12 —á–∞—Å–æ–≤)
  static const int profileCacheDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 30 –º–∏–Ω—É—Ç)
  static const int searchCacheDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 5 –º–∏–Ω—É—Ç)

  static Future<SharedPreferences> _getPrefs() async {
    return await SharedPreferences.getInstance();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫–µ—à
  static bool _isCacheValid(int cacheTime, int duration) {
    final currentTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;
    return (currentTime - cacheTime) < duration;
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞
  static void _log(String message) {
    developer.log('$_debugEmoji $message', name: 'CacheService');
  }

  // –ö–ê–¢–ï–ì–û–†–ò–ò
  static Future<Map<String, dynamic>?> getCachedCategories() async {
    try {
      final prefs = await _getPrefs();
      final cacheTime = prefs.getInt(_categoriesTimeKey) ?? 0;

      if (_isCacheValid(cacheTime, categoriesCacheDuration)) {
        final cachedData = prefs.getString(_categoriesKey);
        if (cachedData != null) {
          _log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ (–∫–µ—à 72 —á–∞—Å–∞)');
          return json.decode(cachedData);
        }
      }
      _log('‚ùå –ö–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      return null;
    }
  }

  static Future<void> setCachedCategories(Map<String, dynamic> data) async {
    try {
      final prefs = await _getPrefs();
      await prefs.setString(_categoriesKey, json.encode(data));
      await prefs.setInt(
          _categoriesTimeKey, DateTime.now().millisecondsSinceEpoch ~/ 1000);
      _log('üíæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∫–µ—à: $e');
    }
  }

  // –ü–†–û–î–£–ö–¢–´
  static Future<Map<String, dynamic>?> getCachedProducts(
      {String? categoryId, String? search}) async {
    try {
      final prefs = await _getPrefs();
      final key = categoryId != null
          ? '${_productsKey}_cat_$categoryId'
          : search != null
              ? '${_productsKey}_search_${search.hashCode}'
              : _productsKey;
      final timeKey = categoryId != null
          ? '${_productsTimeKey}_cat_$categoryId'
          : search != null
              ? '${_productsTimeKey}_search_${search.hashCode}'
              : _productsTimeKey;

      final cacheTime = prefs.getInt(timeKey) ?? 0;
      final duration =
          search != null ? searchCacheDuration : productsCacheDuration;

      if (_isCacheValid(cacheTime, duration)) {
        final cachedData = prefs.getString(key);
        if (cachedData != null) {
          final cacheType = search != null
              ? '–ø–æ–∏—Å–∫–∞'
              : categoryId != null
                  ? '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                  : '—Ç–æ–≤–∞—Ä–æ–≤';
          final cacheDurationStr = search != null ? '5 –º–∏–Ω—É—Ç' : '12 —á–∞—Å–æ–≤';
          _log('‚úÖ –¢–æ–≤–∞—Ä—ã $cacheType –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ (–∫–µ—à $cacheDurationStr)');
          return json.decode(cachedData);
        }
      }
      _log('‚ùå –ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ —Ç–æ–≤–∞—Ä–æ–≤: $e');
      return null;
    }
  }

  static Future<void> setCachedProducts(Map<String, dynamic> data,
      {String? categoryId, String? search}) async {
    try {
      final prefs = await _getPrefs();
      final key = categoryId != null
          ? '${_productsKey}_cat_$categoryId'
          : search != null
              ? '${_productsKey}_search_${search.hashCode}'
              : _productsKey;
      final timeKey = categoryId != null
          ? '${_productsTimeKey}_cat_$categoryId'
          : search != null
              ? '${_productsTimeKey}_search_${search.hashCode}'
              : _productsTimeKey;

      await prefs.setString(key, json.encode(data));
      await prefs.setInt(
          timeKey, DateTime.now().millisecondsSinceEpoch ~/ 1000);

      final cacheType = search != null
          ? '–ø–æ–∏—Å–∫–∞'
          : categoryId != null
              ? '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
              : '—Ç–æ–≤–∞—Ä–æ–≤';
      _log('üíæ –¢–æ–≤–∞—Ä—ã $cacheType —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–µ—à: $e');
    }
  }

  // –ë–ê–ù–ù–ï–†–´
  static Future<Map<String, dynamic>?> getCachedBanners() async {
    try {
      final prefs = await _getPrefs();
      final cacheTime = prefs.getInt(_bannersTimeKey) ?? 0;

      if (_isCacheValid(cacheTime, bannersCacheDuration)) {
        final cachedData = prefs.getString(_bannersKey);
        if (cachedData != null) {
          _log('‚úÖ –ë–∞–Ω–Ω–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ (–∫–µ—à 4 –¥–Ω—è)');
          return json.decode(cachedData);
        }
      }
      _log('‚ùå –ö–µ—à –±–∞–Ω–Ω–µ—Ä–æ–≤ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤: $e');
      return null;
    }
  }

  static Future<void> setCachedBanners(Map<String, dynamic> data) async {
    try {
      final prefs = await _getPrefs();
      await prefs.setString(_bannersKey, json.encode(data));
      await prefs.setInt(
          _bannersTimeKey, DateTime.now().millisecondsSinceEpoch ~/ 1000);
      _log('üíæ –ë–∞–Ω–Ω–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤ –∫–µ—à: $e');
    }
  }

  // –ü–†–û–§–ò–õ–¨
  static Future<Map<String, dynamic>?> getCachedProfile() async {
    try {
      final prefs = await _getPrefs();
      final cacheTime = prefs.getInt(_profileTimeKey) ?? 0;

      if (_isCacheValid(cacheTime, profileCacheDuration)) {
        final cachedData = prefs.getString(_profileKey);
        if (cachedData != null) {
          _log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–µ—à–∞ (–∫–µ—à 30 –º–∏–Ω—É—Ç)');
          return json.decode(cachedData);
        }
      }
      _log('‚ùå –ö–µ—à –ø—Ä–æ—Ñ–∏–ª—è —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return null;
    }
  }

  static Future<void> setCachedProfile(Map<String, dynamic> data) async {
    try {
      final prefs = await _getPrefs();
      await prefs.setString(_profileKey, json.encode(data));
      await prefs.setInt(
          _profileTimeKey, DateTime.now().millisecondsSinceEpoch ~/ 1000);
      _log('üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–µ—à: $e');
    }
  }

  // –û–ß–ò–°–¢–ö–ê –ö–ï–®–ê
  static Future<void> clearCache() async {
    try {
      final prefs = await _getPrefs();
      await prefs.remove(_categoriesKey);
      await prefs.remove(_categoriesTimeKey);
      await prefs.remove(_productsKey);
      await prefs.remove(_productsTimeKey);
      await prefs.remove(_bannersKey);
      await prefs.remove(_bannersTimeKey);
      await prefs.remove(_profileKey);
      await prefs.remove(_profileTimeKey);

      // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–∏—Å–∫–∞
      final keys = prefs.getKeys();
      for (final key in keys) {
        if (key.startsWith(_productsKey) || key.startsWith(_productsTimeKey)) {
          await prefs.remove(key);
        }
      }

      _log('üóëÔ∏è –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: $e');
    }
  }

  static Future<void> clearProductsCache() async {
    try {
      final prefs = await _getPrefs();
      final keys = prefs.getKeys();
      for (final key in keys) {
        if (key.startsWith(_productsKey) || key.startsWith(_productsTimeKey)) {
          await prefs.remove(key);
        }
      }
      _log('üóëÔ∏è –ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤ –æ—á–∏—â–µ–Ω');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ —Ç–æ–≤–∞—Ä–æ–≤: $e');
    }
  }

  static Future<void> clearProfileCache() async {
    try {
      final prefs = await _getPrefs();
      await prefs.remove(_profileKey);
      await prefs.remove(_profileTimeKey);
      _log('üóëÔ∏è –ö–µ—à –ø—Ä–æ—Ñ–∏–ª—è –æ—á–∏—â–µ–Ω');
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
  }

  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ê
  static Future<Map<String, dynamic>> getCacheStats() async {
    try {
      final prefs = await _getPrefs();
      final currentTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;

      return {
        'categories': {
          'cached': prefs.containsKey(_categoriesKey),
          'valid': _isCacheValid(
              prefs.getInt(_categoriesTimeKey) ?? 0, categoriesCacheDuration),
          'expires_in': categoriesCacheDuration -
              (currentTime - (prefs.getInt(_categoriesTimeKey) ?? 0)),
        },
        'products': {
          'cached': prefs.containsKey(_productsKey),
          'valid': _isCacheValid(
              prefs.getInt(_productsTimeKey) ?? 0, productsCacheDuration),
          'expires_in': productsCacheDuration -
              (currentTime - (prefs.getInt(_productsTimeKey) ?? 0)),
        },
        'banners': {
          'cached': prefs.containsKey(_bannersKey),
          'valid': _isCacheValid(
              prefs.getInt(_bannersTimeKey) ?? 0, bannersCacheDuration),
          'expires_in': bannersCacheDuration -
              (currentTime - (prefs.getInt(_bannersTimeKey) ?? 0)),
        },
        'profile': {
          'cached': prefs.containsKey(_profileKey),
          'valid': _isCacheValid(
              prefs.getInt(_profileTimeKey) ?? 0, profileCacheDuration),
          'expires_in': profileCacheDuration -
              (currentTime - (prefs.getInt(_profileTimeKey) ?? 0)),
        },
      };
    } catch (e) {
      _log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: $e');
      return {};
    }
  }
}
